{"ast":null,"code":"import \"source-map-support/register\";\nimport stripePackage from \"stripe\";\nimport { calculateCost } from \"./libs/billing-lib\";\nimport { success, failure } from \"./libs/response-lib\";\nexport async function main(event, context) {\n  const {\n    storage,\n    source\n  } = JSON.parse(event.body);\n  const amount = calculateCost(storage);\n  const description = \"Scratch charge\"; // Load our secret key from the  environment variables\n\n  const stripe = stripePackage(process.env.stripeSecretKey);\n\n  try {\n    await stripe.charges.create({\n      source,\n      amount,\n      description,\n      currency: \"usd\"\n    });\n    return success({\n      status: true\n    });\n  } catch (e) {\n    return failure({\n      message: e.message\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Gabe_Campbell1/DrinktionaryApp/drinktionary-backend/billing.js"],"names":["stripePackage","calculateCost","success","failure","main","event","context","storage","source","JSON","parse","body","amount","description","stripe","process","env","stripeSecretKey","charges","create","currency","status","e","message"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,QAA1B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,qBAAjC;AAEA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACzC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,IAAjB,CAA5B;AACA,QAAMC,MAAM,GAAGX,aAAa,CAACM,OAAD,CAA5B;AACA,QAAMM,WAAW,GAAG,gBAApB,CAHyC,CAKzC;;AACA,QAAMC,MAAM,GAAGd,aAAa,CAACe,OAAO,CAACC,GAAR,CAAYC,eAAb,CAA5B;;AAEA,MAAI;AACF,UAAMH,MAAM,CAACI,OAAP,CAAeC,MAAf,CAAsB;AAC1BX,MAAAA,MAD0B;AAE1BI,MAAAA,MAF0B;AAG1BC,MAAAA,WAH0B;AAI1BO,MAAAA,QAAQ,EAAE;AAJgB,KAAtB,CAAN;AAMA,WAAOlB,OAAO,CAAC;AAAEmB,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAd;AACD,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAOnB,OAAO,CAAC;AAAEoB,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAb,KAAD,CAAd;AACD;AACF","sourcesContent":["import stripePackage from \"stripe\";\nimport { calculateCost } from \"./libs/billing-lib\";\nimport { success, failure } from \"./libs/response-lib\";\n\nexport async function main(event, context) {\n  const { storage, source } = JSON.parse(event.body);\n  const amount = calculateCost(storage);\n  const description = \"Scratch charge\";\n\n  // Load our secret key from the  environment variables\n  const stripe = stripePackage(process.env.stripeSecretKey);\n\n  try {\n    await stripe.charges.create({\n      source,\n      amount,\n      description,\n      currency: \"usd\"\n    });\n    return success({ status: true });\n  } catch (e) {\n    return failure({ message: e.message });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}