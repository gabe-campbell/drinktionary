{"ast":null,"code":"import \"source-map-support/register\";\nimport * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\nexport async function main(event, context) {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    // - 'userId': Identity Pool identity id of the authenticated user\n    // - 'noteId': path parameter\n    Key: {\n      drinkId: event.requestContext.identity.cognitoIdentityId,\n      mainLiquor: event.pathParameters.id\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET mainLiquor = :mainLiqour, glassType = :glassType, liqorOne = :liquorOne, liqourOneAmount = :liqourOneAmount, liquourTwo = :liqourTwo, liqourTwoAmount = :liquorTwoAmount, liquorThree = :liquorThree, liquorThreeAmount = :liquorThreeAmount, mixerOne = :mixerOne, mixerOneAmount = :mixerOneAmount, mixerTwo = :mixerTwo, mixerTwoAmount = :mixerTwoAmount, mixerThree = :mixerThree, mixerThreeAmount = :mixerThreeAmount, garnish = :garnish, description = :description, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":mainLiqour\": data.mainLiqour || null,\n      \":glassType\": data.glassType || null,\n      \":liqourOne\": data.liqourOne || null,\n      \":liqourOneAmount\": data.liqourOneAmount || null,\n      \":liqourTwo\": data.liqourTwo || null,\n      \":liqourTwoAmount\": data.liqourTwoAmount || null,\n      \":liqourThree\": data.liqourThree || null,\n      \":liqourThreeAmount\": data.liqourThreeAmount || null,\n      \":mixerOne\": data.mixerOne || null,\n      \":mixerOneAmount\": data.mixerOneAmount || null,\n      \":mixerTwo\": data.mixerTwo || null,\n      \":mixerTwoAmount\": data.mixerTwoAmount || null,\n      \":mixerThree\": data.mixerThree || null,\n      \":mixerThreeAmount\": data.mixerThreeAmount || null,\n      \":garnish\": data.garnish || null,\n      \":description\": data.description || null,\n      \":attachment\": data.attachment || null\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\"\n  };\n\n  try {\n    await dynamoDbLib.call(\"update\", params);\n    return success({\n      status: true\n    });\n  } catch (e) {\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Gabe_Campbell1/DrinktionaryApp/drinktionary-backend/update.js"],"names":["dynamoDbLib","success","failure","main","event","context","data","JSON","parse","body","params","TableName","process","env","tableName","Key","drinkId","requestContext","identity","cognitoIdentityId","mainLiquor","pathParameters","id","UpdateExpression","ExpressionAttributeValues","mainLiqour","glassType","liqourOne","liqourOneAmount","liqourTwo","liqourTwoAmount","liqourThree","liqourThreeAmount","mixerOne","mixerOneAmount","mixerTwo","mixerTwoAmount","mixerThree","mixerThreeAmount","garnish","description","attachment","ReturnValues","call","status","e"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,qBAAjC;AAEA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADV;AAEb;AACA;AACA;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,EAAEZ,KAAK,CAACa,cAAN,CAAqBC,QAArB,CAA8BC,iBADpC;AAEHC,MAAAA,UAAU,EAAEhB,KAAK,CAACiB,cAAN,CAAqBC;AAF9B,KALQ;AASb;AACA;AACAC,IAAAA,gBAAgB,EAAE,4eAXL;AAYbC,IAAAA,yBAAyB,EAAE;AACzB,qBAAelB,IAAI,CAACmB,UAAL,IAAmB,IADT;AAEzB,oBAAcnB,IAAI,CAACoB,SAAL,IAAkB,IAFP;AAGzB,oBAAcpB,IAAI,CAACqB,SAAL,IAAkB,IAHP;AAIzB,0BAAoBrB,IAAI,CAACsB,eAAL,IAAwB,IAJnB;AAKzB,oBAActB,IAAI,CAACuB,SAAL,IAAkB,IALP;AAMzB,0BAAoBvB,IAAI,CAACwB,eAAL,IAAwB,IANnB;AAOzB,sBAAgBxB,IAAI,CAACyB,WAAL,IAAoB,IAPX;AAQzB,4BAAsBzB,IAAI,CAAC0B,iBAAL,IAA0B,IARvB;AASzB,mBAAa1B,IAAI,CAAC2B,QAAL,IAAiB,IATL;AAUzB,yBAAmB3B,IAAI,CAAC4B,cAAL,IAAuB,IAVjB;AAWzB,mBAAa5B,IAAI,CAAC6B,QAAL,IAAiB,IAXL;AAYzB,yBAAmB7B,IAAI,CAAC8B,cAAL,IAAuB,IAZjB;AAazB,qBAAe9B,IAAI,CAAC+B,UAAL,IAAmB,IAbT;AAczB,2BAAqB/B,IAAI,CAACgC,gBAAL,IAAyB,IAdrB;AAezB,kBAAYhC,IAAI,CAACiC,OAAL,IAAgB,IAfH;AAgBzB,sBAAgBjC,IAAI,CAACkC,WAAL,IAAoB,IAhBX;AAiBzB,qBAAelC,IAAI,CAACmC,UAAL,IAAmB;AAjBT,KAZd;AA+Bb;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AAlCD,GAAf;;AAqCA,MAAI;AACF,UAAM1C,WAAW,CAAC2C,IAAZ,CAAiB,QAAjB,EAA2BjC,MAA3B,CAAN;AACA,WAAOT,OAAO,CAAC;AAAE2C,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAd;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO3C,OAAO,CAAC;AAAE0C,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAd;AACD;AACF","sourcesContent":["import * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\n\nexport async function main(event, context) {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    // - 'userId': Identity Pool identity id of the authenticated user\n    // - 'noteId': path parameter\n    Key: {\n      drinkId: event.requestContext.identity.cognitoIdentityId,\n      mainLiquor: event.pathParameters.id\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET mainLiquor = :mainLiqour, glassType = :glassType, liqorOne = :liquorOne, liqourOneAmount = :liqourOneAmount, liquourTwo = :liqourTwo, liqourTwoAmount = :liquorTwoAmount, liquorThree = :liquorThree, liquorThreeAmount = :liquorThreeAmount, mixerOne = :mixerOne, mixerOneAmount = :mixerOneAmount, mixerTwo = :mixerTwo, mixerTwoAmount = :mixerTwoAmount, mixerThree = :mixerThree, mixerThreeAmount = :mixerThreeAmount, garnish = :garnish, description = :description, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":mainLiqour\": data.mainLiqour || null,\n      \":glassType\": data.glassType || null,\n      \":liqourOne\": data.liqourOne || null,\n      \":liqourOneAmount\": data.liqourOneAmount || null,\n      \":liqourTwo\": data.liqourTwo || null,\n      \":liqourTwoAmount\": data.liqourTwoAmount || null,\n      \":liqourThree\": data.liqourThree || null,\n      \":liqourThreeAmount\": data.liqourThreeAmount || null,\n      \":mixerOne\": data.mixerOne || null,\n      \":mixerOneAmount\": data.mixerOneAmount || null,\n      \":mixerTwo\": data.mixerTwo || null,\n      \":mixerTwoAmount\": data.mixerTwoAmount || null,\n      \":mixerThree\": data.mixerThree || null,\n      \":mixerThreeAmount\": data.mixerThreeAmount || null,\n      \":garnish\": data.garnish || null,\n      \":description\": data.description || null,\n      \":attachment\": data.attachment || null,\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\"\n  };\n\n  try {\n    await dynamoDbLib.call(\"update\", params);\n    return success({ status: true });\n  } catch (e) {\n    return failure({ status: false });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}